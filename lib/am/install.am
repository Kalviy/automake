## automake - create Makefile.in from Makefile.am
## Copyright (C) 2001, 2002, 2003  Free Software Foundation, Inc.

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
## 02111-1307, USA.

## ----------------------------------------- ##
## installdirs -- Creating the installdirs.  ##
## ----------------------------------------- ##


if %?SUBDIRS%
.PHONY: installdirs installdirs-am
RECURSIVE_TARGETS += installdirs-recursive
installdirs: installdirs-recursive
installdirs-am:%installdirs-local%
?am__installdirs?	$(mkdir_p) %am__installdirs%
else !%?SUBDIRS%
.PHONY: installdirs
installdirs:%installdirs-local%
?am__installdirs?	$(mkdir_p) %am__installdirs%
endif !%?SUBDIRS%


## ----------------- ##
## Install targets.  ##
## ----------------- ##

.PHONY: install install-exec install-data uninstall
.PHONY: install-exec-am install-data-am uninstall-am

if %?SUBDIRS%
RECURSIVE_TARGETS += install-data-recursive install-exec-recursive \
		     install-recursive uninstall-recursive
REAL_INSTALL=install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive
else !%?SUBDIRS%
REAL_INSTALL=install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am
endif !%?SUBDIRS%

if %?INSTALLMANIFEST%
# If STAR_MANIFEST_DIR is defined and MANIFEST_FD is _not_, then
# invoke the install-manifest target, otherwise, do the real install
# rule.  This means that if this is being invoked from within an
# install-manifest rule further up the process tree, we don't create
# another manifest.
## Pass the SHELL variable as /bin/sh, to ensure that the
## install-manifest target is executed using that shell.  That target
## requires that file descriptor 5 is inherited, open, by the submake,
## and /bin/ksh carefully closes all fd > 2 when invoking children.
## The configure script presumably rejected /bin/sh for a reason, but
## as of autoconf 2.57 at least, it was because it didn't support
## $LINENO, which we don't care about.  I've only seen that happen on
## Tru64 (v5.1 at least), and that was only a problem when using a
## non-default make, since the default one on Tru64 ignores $(SHELL)
## and uses /bin/sh for everything.
install: %maybe_BUILT_SOURCES% all-am
	if test -n "$(STAR_MANIFEST_DIR)" -a -z "$$MANIFEST_FD"; then \
	    $(MAKE) SHELL=/bin/sh $(AM_MAKEFLAGS) install-manifest; \
	else \
	    $(MAKE) $(AM_MAKEFLAGS) $(REAL_INSTALL); \
	fi

.PHONY: install-manifest
install-manifest:
	$(mkdir_p) $(DESTDIR)$(STAR_MANIFEST_DIR)
	MF=$${TMPDIR-/tmp}/manifest-$$$$; rm -f $$MF && exec 5>$$MF && \
	  MF_INST_OK=:; \
	  echo "<?xml version='1.0'?>" >&5 ; \
	  echo "<!DOCTYPE manifest SYSTEM 'componentinfo.dtd'>" >&5 ; \
	  echo "<manifest component='$(PACKAGE)'>" >&5 ; \
	  echo "<version>$(PACKAGE_VERSION)</version>" >&5 ; \
	  echo "<files>" >&5 ; \
	  MANIFEST_FD=5; export MANIFEST_FD; \
## If this is a standard package, then it's easy -- just use the
## MANIFEST_FD variable in the environment.
?STANDARDMANIFEST?	  $(MAKE) $(AM_MAKEFLAGS) $(REAL_INSTALL) || MF_INST_OK=false; \
## Otherwise, install the component to a staging area, using the
## STAR_MANIFEST_INSTALL_COMMAND defined in the Makefile.am, here available
## in MANIFESTMAKEINSTALL.
?!STANDARDMANIFEST?	  STG=$${TMPDIR-/tmp}/starconf-$$$$ ; \
?!STANDARDMANIFEST?	  rm -Rf $$STG ; \
?!STANDARDMANIFEST?	  $(mkdir_p) $$STG ; \
?!STANDARDMANIFEST?	  ( DESTDIR=$$STG; prefix=$(prefix); \
?!STANDARDMANIFEST?	      export DESTDIR prefix; \
?!STANDARDMANIFEST?	      %MANIFESTMAKEINSTALL% ) || MF_INST_OK=false ; \
?!STANDARDMANIFEST?	  if $$MF_INST_OK; then \
?!STANDARDMANIFEST?	    $(mkdir_p) $(DESTDIR)$(prefix) ; \
## Find all the files in the staging area $STG, add any final installation
## location, append each of these to the manifest FD, and delete each
## (installed) file, so that the cp below will work.  The copy below will not
## act on anything above $STG/$(prefix), but nothing should be installed
## there, so that oughtn't to be a problem.  We rely on starconf macro
## STAR_SPECIAL_INSTALL_COMMAND to find a CP_RECURSIVE which will
## copy symlinks as symlinks.
?!STANDARDMANIFEST?	    (cd $$STG && find . ! -type d | \
?!STANDARDMANIFEST?	      sed "s,^\.,$$DESTDIR," | \
?!STANDARDMANIFEST?	      while read f; do \
?!STANDARDMANIFEST?	        echo $$f>&5; \
?!STANDARDMANIFEST?	        test -f $$f && { chmod 666 $$f && rm -f $$f; }; \
?!STANDARDMANIFEST?	      done ); \
?!STANDARDMANIFEST?	    if test -d "$$STG$(prefix)"; then \
?!STANDARDMANIFEST?	      echo "(cd $$STG$(prefix); $(CP_RECURSIVE) . $$DESTDIR$(prefix))"; \
?!STANDARDMANIFEST?	      (cd $$STG$(prefix) && $(CP_RECURSIVE) . $$DESTDIR$(prefix)) || MF_INST_OK=false; \
?!STANDARDMANIFEST?	    else echo "NOTE: no files installed">&2; fi; \
?!STANDARDMANIFEST?	  fi; \
?!STANDARDMANIFEST?	  rm -Rf $$STG; \
	  echo "</files>" >&5; \
	  echo "</manifest>" >&5; \
	  exec 5>&-; \
	  if $$MF_INST_OK; then \
	    $(INSTALL_DATA) $$MF $(DESTDIR)$(STAR_MANIFEST_DIR)/$(PACKAGE); \
	  else \
	    echo "Installation of component $(DESTDIR)$(STAR_MANIFEST_DIR)/$(PACKAGE) failed" >&2; \
	  fi; \
	  rm -f $$MF; \
## Propagate the exit status to the calling make, and thence to the user
	  $$MF_INST_OK

else !%?INSTALLMANIFEST%
install:%maybe_BUILT_SOURCES% $(REAL_INSTALL)
endif !%?INSTALLMANIFEST%


.PHONY: install-am
install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
## ## Starlink: install a stamp file, just in case install-manifest isn't run
## 	rm -f stamp-starlink-install
## 	echo "component=\"$(PACKAGE)\"" >stamp-starlink-install
## 	echo "version=\"$(PACKAGE_VERSION)\"" >>stamp-starlink-install
## 	echo "date=\"`date`\"" >>stamp-starlink-install
## 	$(mkdir_p) $(STAR_MANIFEST_DIR)
## 	$(INSTALL_DATA) stamp-starlink-install \
## 	    $(STAR_MANIFEST_DIR)/stamp-`echo $(PACKAGE) | sed 's/[^A-Za-z0-9.-]/_/g'`
## 	rm -f stamp-starlink-install

.PHONY: installcheck
?SUBDIRS?installcheck: installcheck-recursive
?!SUBDIRS?installcheck: installcheck-am
?!SUBDIRS?.PHONY: installcheck-am
?!SUBDIRS?installcheck-am:

## If you ever modify this, keep in mind that INSTALL_PROGRAM is used
## in subdirectories, so never set it to a value relative to the top
## directory.
.PHONY: install-strip
install-strip:
## Beware that they are two variables used to install programs:
##   INSTALL_PROGRAM is used for ordinary *_PROGRAMS
##   install_sh_PROGRAM is used for nobase_*_PROGRAMS (because install-sh
##                                                     creates directories)
## It's OK to override both with INSTALL_STRIP_PROGRAM, because
## INSTALL_STRIP_PROGRAM uses install-sh (see m4/strip.m4 for a rational).
##
## Use double quotes here because we might need to interpolate some
## backquotes at runtime.
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
