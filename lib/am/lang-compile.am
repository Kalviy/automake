## automake - create Makefile.in from Makefile.am
## Copyright (C) 2001, 2003 Free Software Foundation, Inc.

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
## 02111-1307, USA.

## This file is read once per *language*, not per extension.

## ---------------------- ##
## Preprocessed Fortran.  ##
## ---------------------- ##

## We also handle the case of preprocessing `.F/.fpp' files into `.f'
## files.  autoconf determines whether the Fortran compiler can
## compile preprocessable source directly (so-called `direct'
## compilation) or whether the code must be preprocessed separately
## (`indirect').  In the former case, it sets FPP_PREPROCESS_EXT to be
## some dummy value, so that the rule is not used; in the latter case,
## it sets it to be $FPP_SRC_EXT (which is `fpp' or `F', as
## appropriate).
##
## FIXME: it would possibly be useful (for debugging) to simply let
## FPP_PREPROCESS_EXT be FPP_SRC_EXT always, so that the user could
## generate the .f file corresponding to a given .fpp file.  Would
## this (having .fpp be the source in two different suffix rules)
## cause any twisted `make' implementations to get confused?
##
## Avoiding `.fpp.f' is not just for configurability, but because
## automake subroutine file_contents_internal, with the help of
## Automake::Rule::define, appears to be a little bit too smart and
## discards a rule `.fpp.f:'.

if %?PPFC%
.@FPP_PREPROCESS_EXT@.f:
	$(FPP) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(FPPFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS) $< @FPP_OUTPUT@
endif %?PPFC%


## -------- ##
## Ratfor.  ##
## -------- ##

## We also handle the case of preprocessing `.r' files into `.f' files.
if %?RATFOR%
.r.f:
	$(RCOMPILE) -F $<
endif %?RATFOR%
