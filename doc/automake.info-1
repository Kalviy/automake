This is automake.info, produced by makeinfo version 4.3 from
automake.texi.



   This manual is for GNU Automake (version 1.8.2-fpp1, 15 January
2004), a program which creates GNU standards-compliant Makefiles from
template files.

   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."
   
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* automake: (automake).		Making Makefile.in's.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* aclocal: (automake)Invoking aclocal.          Generating aclocal.m4.
END-INFO-DIR-ENTRY


File: automake.info,  Node: Top,  Next: Introduction,  Up: (dir)

GNU Automake
************



   This manual is for GNU Automake (version 1.8.2-fpp1, 15 January
2004), a program which creates GNU standards-compliant Makefiles from
template files.

   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."
   
* Menu:

* Introduction::                Automake's purpose
* Generalities::                General ideas
* Examples::                    Some example packages
* Invoking Automake::           Creating a Makefile.in
* configure::                   Scanning configure.ac or configure.in
* Top level::                   The top-level Makefile.am
* Alternative::                 An alternative approach to subdirectories
* Programs::                    Building programs and libraries
* Other objects::               Other derived objects
* Other GNU Tools::             Other GNU Tools
* Documentation::               Building documentation
* Install::                     What gets installed
* Clean::                       What gets cleaned
* Dist::                        What goes in a distribution
* Tests::                       Support for test suites
* Rebuilding::                  Automatic rebuilding of Makefile
* Options::                     Changing Automake's behavior
* Miscellaneous::               Miscellaneous rules
* Include::                     Including extra files in an Automake template.
* Conditionals::                Conditionals
* Gnits::                       The effect of `--gnu' and `--gnits'
* Cygnus::                      The effect of `--cygnus'
* Extending::                   Extending Automake
* Distributing::                Distributing the Makefile.in
* API versioning::              About compatibility between Automake versions
* FAQ::                         Frequently Asked Questions
* Copying This Manual::         How to make copies of this manual
* Indices::                     Indices of variables, macros, and concepts

 --- The Detailed Node Listing ---

General ideas

* General Operation::           General operation of Automake
* Strictness::                  Standards conformance checking
* Uniform::                     The Uniform Naming Scheme
* Canonicalization::            How derived variables are named
* User Variables::              Variables reserved for the user
* Auxiliary Programs::          Programs automake might require

Some example packages

* Complete::                    A simple example, start to finish
* Hello::                       A classic program
* true::                        Building true and false

Scanning `configure.ac'

* Requirements::                Configuration requirements
* Optional::                    Other things Automake recognizes
* Invoking aclocal::            Auto-generating aclocal.m4
* aclocal options::             aclocal command line arguments
* Macro search path::           Modifying aclocal's search path
* Macros::                      Autoconf macros supplied with Automake
* Extending aclocal::           Writing your own aclocal macros
* Local Macros::                Organizing local macros
* Future of aclocal::           aclocal's scheduled death

Auto-generating aclocal.m4

* aclocal options::             Options supported by aclocal
* Macro search path::           How aclocal finds .m4 files

Autoconf macros supplied with Automake

* Public macros::               Macros that you can use.
* Private macros::              Macros that you should not use.

Building Programs and Libraries

* A Program::                   Building a program
* A Library::                   Building a library
* A Shared Library::            Building a Libtool library
* Program and Library Variables::  Variables controlling program and
                                library builds
* Default _SOURCES::            Default source files
* LIBOBJS::                     Special handling for LIBOBJS and ALLOCA
* Program variables::           Variables used when building a program
* Yacc and Lex::                Yacc and Lex support
* C++ Support::                 Compiling C++ sources
* Assembly Support::            Compiling assembly sources
* Fortran 77 Support::          Compiling Fortran 77 sources
* Java Support::                Compiling Java sources
* Support for Other Languages::  Compiling other languages
* ANSI::                        Automatic de-ANSI-fication
* Dependencies::                Automatic dependency tracking
* EXEEXT::                      Support for executable extensions

Building a program

* Program Sources::             Defining program sources
* Linking::                     Linking with libraries or extra objects
* Conditional Sources::         Handling conditional sources
* Conditional Programs::        Building program conditionally

Building a Shared Library

* Libtool Concept::             Introducing Libtool
* Libtool Libraries::           Declaring Libtool Libraries
* Conditional Libtool Libraries::  Building Libtool Libraries Conditionally
* Conditional Libtool Sources::  Choosing Library Sources Conditionally
* Libtool Convenience Libraries::  Building Convenience Libtool Libraries
* Libtool Modules::             Building Libtool Modules
* Libtool Flags::               Using _LIBADD and _LDFLAGS
* LTLIBOBJ::                    Using $(LTLIBOBJ)
* Libtool Issues::              Common Issues Related to Libtool's Use

Fortran 77 Support

* Preprocessing Fortran 77::    Preprocessing Fortran 77 sources
* Compiling Fortran 77 Files::  Compiling Fortran 77 sources
* Mixing Fortran 77 With C and C++::  Mixing Fortran 77 With C and C++

Mixing Fortran 77 With C and C++

* How the Linker is Chosen::    Automatic linker selection

Other Derived Objects

* Scripts::                     Executable scripts
* Headers::                     Header files
* Data::                        Architecture-independent data files
* Sources::                     Derived sources

Built sources

* Built sources example::       Several ways to handle built sources.

Other GNU Tools

* Emacs Lisp::                  Emacs Lisp
* gettext::                     Gettext
* Libtool::                     Libtool
* Java::                        Java
* Python::                      Python

Building documentation

* Texinfo::                     Texinfo
* Man pages::                   Man pages

Miscellaneous Rules

* Tags::                        Interfacing to etags and mkid
* Suffixes::                    Handling new file extensions
* Multilibs::                   Support for multilibs.

Frequently Asked Questions about Automake

* CVS::                         CVS and generated files
* maintainer-mode::             missing and AM_MAINTAINER_MODE
* wildcards::                   Why doesn't Automake support wildcards?
* distcleancheck::              Files left in build directory after distclean
* renamed objects::             Why are object files sometimes renamed?

Copying This Manual

* GNU Free Documentation License::  License for copying this manual

Indices

* Macro and Variable Index::    Index of Autoconf macros and Automake variables
* General Index::               General index


File: automake.info,  Node: Introduction,  Next: Generalities,  Prev: Top,  Up: Top

Introduction
************

   Automake is a tool for automatically generating `Makefile.in's from
files called `Makefile.am'.  Each `Makefile.am' is basically a series
of `make' variable definitions(1), with rules being thrown in
occasionally.  The generated `Makefile.in's are compliant with the GNU
Makefile standards.

   The GNU Makefile Standards Document (*note Makefile Conventions:
(standards)Makefile Conventions.)  is long, complicated, and subject to
change.  The goal of Automake is to remove the burden of Makefile
maintenance from the back of the individual GNU maintainer (and put it
on the back of the Automake maintainer).

   The typical Automake input file is simply a series of variable
definitions.  Each such file is processed to create a `Makefile.in'.
There should generally be one `Makefile.am' per directory of a project.

   Automake does constrain a project in certain ways; for instance it
assumes that the project uses Autoconf (*note Introduction:
(autoconf)Top.), and enforces certain restrictions on the
`configure.ac' contents(2).

   Automake requires `perl' in order to generate the `Makefile.in's.
However, the distributions created by Automake are fully GNU
standards-compliant, and do not require `perl' in order to be built.

   Mail suggestions and bug reports for Automake to
<bug-automake@gnu.org>.

   ---------- Footnotes ----------

   (1) These variables are also called "make macros" in Make
terminology, however in this manual we reserve the term "macro" for
Autoconf's macros.

   (2) Older Autoconf versions used `configure.in'.  Autoconf 2.50 and
greater promotes `configure.ac' over `configure.in'.  The rest of this
documentation will refer to `configure.ac', but Automake also supports
`configure.in' for backward compatibility.


File: automake.info,  Node: Generalities,  Next: Examples,  Prev: Introduction,  Up: Top

General ideas
*************

   The following sections cover a few basic ideas that will help you
understand how Automake works.

* Menu:

* General Operation::           General operation of Automake
* Strictness::                  Standards conformance checking
* Uniform::                     The Uniform Naming Scheme
* Canonicalization::            How derived variables are named
* User Variables::              Variables reserved for the user
* Auxiliary Programs::          Programs automake might require


File: automake.info,  Node: General Operation,  Next: Strictness,  Up: Generalities

General Operation
=================

   Automake works by reading a `Makefile.am' and generating a
`Makefile.in'.  Certain variables and rules defined in the
`Makefile.am' instruct Automake to generate more specialized code; for
instance, a `bin_PROGRAMS' variable definition will cause rules for
compiling and linking programs to be generated.

   The variable definitions and rules in the `Makefile.am' are copied
verbatim into the generated file.  This allows you to add arbitrary
code into the generated `Makefile.in'.  For instance the Automake
distribution includes a non-standard rule for the `cvs-dist' target,
which the Automake maintainer uses to make distributions from his
source control system.

   Note that most GNU make extensions are not recognized by Automake.
Using such extensions in a `Makefile.am' will lead to errors or
confusing behavior.

   A special exception is that the GNU make append operator, `+=', is
supported.  This operator appends its right hand argument to the
variable specified on the left.  Automake will translate the operator
into an ordinary `=' operator; `+=' will thus work with any make
program.

   Automake tries to keep comments grouped with any adjoining rules or
variable definitions.

   A rule defined in `Makefile.am' generally overrides any such rule of
a similar name that would be automatically generated by `automake'.
Although this is a supported feature, it is generally best to avoid
making use of it, as sometimes the generated rules are very particular.

   Similarly, a variable defined in `Makefile.am' or `AC_SUBST''ed from
`configure.ac' will override any definition of the variable that
`automake' would ordinarily create.  This feature is more often useful
than the ability to override a rule.  Be warned that many of the
variables generated by `automake' are considered to be for internal use
only, and their names might change in future releases.

   When examining a variable definition, Automake will recursively
examine variables referenced in the definition.  For example, if
Automake is looking at the content of `foo_SOURCES' in this snippet

     xs = a.c b.c
     foo_SOURCES = c.c $(xs)

   it would use the files `a.c', `b.c', and `c.c' as the contents of
`foo_SOURCES'.

   Automake also allows a form of comment which is _not_ copied into
the output; all lines beginning with `##' (leading spaces allowed) are
completely ignored by Automake.

   It is customary to make the first line of `Makefile.am' read:

     ## Process this file with automake to produce Makefile.in


File: automake.info,  Node: Strictness,  Next: Uniform,  Prev: General Operation,  Up: Generalities

Strictness
==========

   While Automake is intended to be used by maintainers of GNU
packages, it does make some effort to accommodate those who wish to use
it, but do not want to use all the GNU conventions.

   To this end, Automake supports three levels of "strictness"--the
strictness indicating how stringently Automake should check standards
conformance.

   The valid strictness levels are:

`foreign'
     Automake will check for only those things which are absolutely
     required for proper operations.  For instance, whereas GNU
     standards dictate the existence of a `NEWS' file, it will not be
     required in this mode.  The name comes from the fact that Automake
     is intended to be used for GNU programs; these relaxed rules are
     not the standard mode of operation.

`gnu'
     Automake will check--as much as possible--for compliance to the GNU
     standards for packages.  This is the default.

`gnits'
     Automake will check for compliance to the as-yet-unwritten "Gnits
     standards".  These are based on the GNU standards, but are even
     more detailed.  Unless you are a Gnits standards contributor, it is
     recommended that you avoid this option until such time as the Gnits
     standard is actually published (which may never happen).

   For more information on the precise implications of the strictness
level, see *Note Gnits::.

   Automake also has a special "cygnus" mode which is similar to
strictness but handled differently.  This mode is useful for packages
which are put into a "Cygnus" style tree (e.g., the GCC tree).  For
more information on this mode, see *Note Cygnus::.


File: automake.info,  Node: Uniform,  Next: Canonicalization,  Prev: Strictness,  Up: Generalities

The Uniform Naming Scheme
=========================

   Automake variables generally follow a "uniform naming scheme" that
makes it easy to decide how programs (and other derived objects) are
built, and how they are installed.  This scheme also supports
`configure' time determination of what should be built.

   At `make' time, certain variables are used to determine which
objects are to be built.  The variable names are made of several pieces
which are concatenated together.

   The piece which tells automake what is being built is commonly called
the "primary".  For instance, the primary `PROGRAMS' holds a list of
programs which are to be compiled and linked.

   A different set of names is used to decide where the built objects
should be installed.  These names are prefixes to the primary which
indicate which standard directory should be used as the installation
directory.  The standard directory names are given in the GNU standards
(*note Directory Variables: (standards)Directory Variables.).  Automake
extends this list with `pkglibdir', `pkgincludedir', and `pkgdatadir';
these are the same as the non-`pkg' versions, but with `$(PACKAGE)'
appended.  For instance, `pkglibdir' is defined as
`$(libdir)/$(PACKAGE)'.

   For each primary, there is one additional variable named by
prepending `EXTRA_' to the primary name.  This variable is used to list
objects which may or may not be built, depending on what `configure'
decides.  This variable is required because Automake must statically
know the entire list of objects that may be built in order to generate
a `Makefile.in' that will work in all cases.

   For instance, `cpio' decides at configure time which programs are
built.  Some of the programs are installed in `bindir', and some are
installed in `sbindir':

     EXTRA_PROGRAMS = mt rmt
     bin_PROGRAMS = cpio pax
     sbin_PROGRAMS = $(MORE_PROGRAMS)

   Defining a primary without a prefix as a variable, e.g., `PROGRAMS',
is an error.

   Note that the common `dir' suffix is left off when constructing the
variable names; thus one writes `bin_PROGRAMS' and not
`bindir_PROGRAMS'.

   Not every sort of object can be installed in every directory.
Automake will flag those attempts it finds in error.  Automake will
also diagnose obvious misspellings in directory names.

   Sometimes the standard directories--even as augmented by Automake--
are not enough.  In particular it is sometimes useful, for clarity, to
install objects in a subdirectory of some predefined directory.  To this
end, Automake allows you to extend the list of possible installation
directories.  A given prefix (e.g. `zar') is valid if a variable of the
same name with `dir' appended is defined (e.g. `zardir').

   For instance, installation of HTML files is part of Automake, you
could use this to install raw HTML documentation:

     htmldir = $(prefix)/html
     html_DATA = automake.html

   The special prefix `noinst' indicates that the objects in question
should be built but not installed at all.  This is usually used for
objects required to build the rest of your package, for instance static
libraries (*note A Library::), or helper scripts.

   The special prefix `check' indicates that the objects in question
should not be built until the `make check' command is run.  Those
objects are not installed either.

   The current primary names are `PROGRAMS', `LIBRARIES', `LISP',
`PYTHON', `JAVA', `SCRIPTS', `DATA', `HEADERS', `MANS', and `TEXINFOS'.

   Some primaries also allow additional prefixes which control other
aspects of `automake''s behavior.  The currently defined prefixes are
`dist_', `nodist_', and `nobase_'.  These prefixes are explained later
(*note Program and Library Variables::).


File: automake.info,  Node: Canonicalization,  Next: User Variables,  Prev: Uniform,  Up: Generalities

How derived variables are named
===============================

   Sometimes a Makefile variable name is derived from some text the
maintainer supplies.  For instance, a program name listed in
`_PROGRAMS' is rewritten into the name of a `_SOURCES' variable.  In
cases like this, Automake canonicalizes the text, so that program names
and the like do not have to follow Makefile variable naming rules.  All
characters in the name except for letters, numbers, the strudel (@),
and the underscore are turned into underscores when making variable
references.

   For example, if your program is named `sniff-glue', the derived
variable name would be `sniff_glue_SOURCES', not `sniff-glue_SOURCES'.
Similarly the sources for a library named `libmumble++.a' should be
listed in the `libmumble___a_SOURCES' variable.

   The strudel is an addition, to make the use of Autoconf
substitutions in variable names less obfuscating.


File: automake.info,  Node: User Variables,  Next: Auxiliary Programs,  Prev: Canonicalization,  Up: Generalities

Variables reserved for the user
===============================

   Some `Makefile' variables are reserved by the GNU Coding Standards
for the use of the "user" - the person building the package.  For
instance, `CFLAGS' is one such variable.

   Sometimes package developers are tempted to set user variables such
as `CFLAGS' because it appears to make their job easier.  However, the
package itself should never set a user variable, particularly not to
include switches which are required for proper compilation of the
package.  Since these variables are documented as being for the package
builder, that person rightfully expects to be able to override any of
these variables at build time.

   To get around this problem, automake introduces an automake-specific
shadow variable for each user flag variable.  (Shadow variables are not
introduced for variables like `CC', where they would make no sense.)
The shadow variable is named by prepending `AM_' to the user variable's
name.  For instance, the shadow variable for `YFLAGS' is `AM_YFLAGS'.


File: automake.info,  Node: Auxiliary Programs,  Prev: User Variables,  Up: Generalities

Programs automake might require
===============================

   Automake sometimes requires helper programs so that the generated
`Makefile' can do its work properly.  There are a fairly large number
of them, and we list them here.

`ansi2knr.c'
`ansi2knr.1'
     These two files are used by the automatic de-ANSI-fication support
     (*note ANSI::).

`compile'
     This is a wrapper for compilers which don't accept both `-c' and
     `-o' at the same time.  It is only used when absolutely required.
     Such compilers are rare.

`config.guess'
`config.sub'
     These programs compute the canonical triplets for the given build,
     host, or target architecture.  These programs are updated
     regularly to support new architectures and fix probes broken by
     changes in new kernel versions.  You are encouraged to fetch the
     latest versions of these files from
     <ftp://ftp.gnu.org/gnu/config/> before making a release.

`depcomp'
     This program understands how to run a compiler so that it will
     generate not only the desired output but also dependency
     information which is then used by the automatic dependency
     tracking feature.

`elisp-comp'
     This program is used to byte-compile Emacs Lisp code.

`install-sh'
     This is a replacement for the `install' program which works on
     platforms where `install' is unavailable or unusable.

`mdate-sh'
     This script is used to generate a `version.texi' file.  It examines
     a file and prints some date information about it.

`missing'
     This wraps a number of programs which are typically only required
     by maintainers.  If the program in question doesn't exist,
     `missing' prints an informative warning and attempts to fix things
     so that the build can continue.

`mkinstalldirs'
     This script used to be a wrapper around `mkdir -p', which is not
     portable.  Now we use prefer to use `install-sh -d' when configure
     finds that `mkdir -p' does not work, this makes one less script to
     distribute.

     For backward compatibility `mkinstalldirs' is still used and
     distributed when `automake' finds it in a package.  But it is no
     longer installed automatically, and it should be safe to remove it.

`py-compile'
     This is used to byte-compile Python scripts.

`texinfo.tex'
     Not a program, this file is required for `make dvi', `make ps' and
     `make pdf' to work when Texinfo sources are in the package.

`ylwrap'
     This program wraps `lex' and `yacc' and ensures that, for
     instance, multiple `yacc' instances can be invoked in a single
     directory in parallel.


File: automake.info,  Node: Examples,  Next: Invoking Automake,  Prev: Generalities,  Up: Top

Some example packages
*********************

* Menu:

* Complete::                    A simple example, start to finish
* Hello::                       A classic program
* true::                        Building true and false


File: automake.info,  Node: Complete,  Next: Hello,  Up: Examples

A simple example, start to finish
=================================

   Let's suppose you just finished writing `zardoz', a program to make
your head float from vortex to vortex.  You've been using Autoconf to
provide a portability framework, but your `Makefile.in's have been
ad-hoc.  You want to make them bulletproof, so you turn to Automake.

   The first step is to update your `configure.ac' to include the
commands that `automake' needs.  The way to do this is to add an
`AM_INIT_AUTOMAKE' call just after `AC_INIT':

     AC_INIT(zardoz, 1.0)
     AM_INIT_AUTOMAKE
     ...

   Since your program doesn't have any complicating factors (e.g., it
doesn't use `gettext', it doesn't want to build a shared library),
you're done with this part.  That was easy!

   Now you must regenerate `configure'.  But to do that, you'll need to
tell `autoconf' how to find the new macro you've used.  The easiest way
to do this is to use the `aclocal' program to generate your
`aclocal.m4' for you.  But wait... maybe you already have an
`aclocal.m4', because you had to write some hairy macros for your
program.  The `aclocal' program lets you put your own macros into
`acinclude.m4', so simply rename and then run:

     mv aclocal.m4 acinclude.m4
     aclocal
     autoconf

   Now it is time to write your `Makefile.am' for `zardoz'.  Since
`zardoz' is a user program, you want to install it where the rest of
the user programs go: `bindir'.  Additionally, `zardoz' has some
Texinfo documentation.  Your `configure.ac' script uses
`AC_REPLACE_FUNCS', so you need to link against `$(LIBOBJS)'.  So
here's what you'd write:

     bin_PROGRAMS = zardoz
     zardoz_SOURCES = main.c head.c float.c vortex9.c gun.c
     zardoz_LDADD = $(LIBOBJS)
     
     info_TEXINFOS = zardoz.texi

   Now you can run `automake --add-missing' to generate your
`Makefile.in' and grab any auxiliary files you might need, and you're
done!


File: automake.info,  Node: Hello,  Next: true,  Prev: Complete,  Up: Examples

A classic program
=================

   GNU hello (ftp://prep.ai.mit.edu/pub/gnu/hello-1.3.tar.gz) is
renowned for its classic simplicity and versatility.  This section shows
how Automake could be used with the GNU Hello package.  The examples
below are from the latest beta version of GNU Hello, but with all of the
maintainer-only code stripped out, as well as all copyright comments.

   Of course, GNU Hello is somewhat more featureful than your
traditional two-liner.  GNU Hello is internationalized, does option
processing, and has a manual and a test suite.

   Here is the `configure.ac' from GNU Hello.  *Please note:* The calls
to `AC_INIT' and `AM_INIT_AUTOMAKE' in this example use a deprecated
syntax.  For the current approach, see the description of
`AM_INIT_AUTOMAKE' in *Note Public macros::.

     dnl Process this file with autoconf to produce a configure script.
     AC_INIT(src/hello.c)
     AM_INIT_AUTOMAKE(hello, 1.3.11)
     AM_CONFIG_HEADER(config.h)
     
     dnl Set of available languages.
     ALL_LINGUAS="de fr es ko nl no pl pt sl sv"
     
     dnl Checks for programs.
     AC_PROG_CC
     AC_ISC_POSIX
     
     dnl Checks for libraries.
     
     dnl Checks for header files.
     AC_STDC_HEADERS
     AC_HAVE_HEADERS(string.h fcntl.h sys/file.h sys/param.h)
     
     dnl Checks for library functions.
     AC_FUNC_ALLOCA
     
     dnl Check for st_blksize in struct stat
     AC_ST_BLKSIZE
     
     dnl internationalization macros
     AM_GNU_GETTEXT
     AC_OUTPUT([Makefile doc/Makefile intl/Makefile po/Makefile.in \
                src/Makefile tests/Makefile tests/hello],
        [chmod +x tests/hello])

   The `AM_' macros are provided by Automake (or the Gettext library);
the rest are standard Autoconf macros.

   The top-level `Makefile.am':

     EXTRA_DIST = BUGS ChangeLog.O
     SUBDIRS = doc intl po src tests

   As you can see, all the work here is really done in subdirectories.

   The `po' and `intl' directories are automatically generated using
`gettextize'; they will not be discussed here.

   In `doc/Makefile.am' we see:

     info_TEXINFOS = hello.texi
     hello_TEXINFOS = gpl.texi

   This is sufficient to build, install, and distribute the GNU Hello
manual.

   Here is `tests/Makefile.am':

     TESTS = hello
     EXTRA_DIST = hello.in testdata

   The script `hello' is generated by `configure', and is the only test
case.  `make check' will run this test.

   Last we have `src/Makefile.am', where all the real work is done:

     bin_PROGRAMS = hello
     hello_SOURCES = hello.c version.c getopt.c getopt1.c getopt.h system.h
     hello_LDADD = $(INTLLIBS) $(ALLOCA)
     localedir = $(datadir)/locale
     INCLUDES = -I../intl -DLOCALEDIR=\"$(localedir)\"


File: automake.info,  Node: true,  Prev: Hello,  Up: Examples

Building true and false
=======================

   Here is another, trickier example.  It shows how to generate two
programs (`true' and `false') from the same source file (`true.c').
The difficult part is that each compilation of `true.c' requires
different `cpp' flags.

     bin_PROGRAMS = true false
     false_SOURCES =
     false_LDADD = false.o
     
     true.o: true.c
             $(COMPILE) -DEXIT_CODE=0 -c true.c
     
     false.o: true.c
             $(COMPILE) -DEXIT_CODE=1 -o false.o -c true.c

   Note that there is no `true_SOURCES' definition.  Automake will
implicitly assume that there is a source file named `true.c', and
define rules to compile `true.o' and link `true'.  The `true.o: true.c'
rule supplied by the above `Makefile.am', will override the Automake
generated rule to build `true.o'.

   `false_SOURCES' is defined to be empty--that way no implicit value
is substituted.  Because we have not listed the source of `false', we
have to tell Automake how to link the program.  This is the purpose of
the `false_LDADD' line.  A `false_DEPENDENCIES' variable, holding the
dependencies of the `false' target will be automatically generated by
Automake from the content of `false_LDADD'.

   The above rules won't work if your compiler doesn't accept both `-c'
and `-o'.  The simplest fix for this is to introduce a bogus dependency
(to avoid problems with a parallel `make'):

     true.o: true.c false.o
             $(COMPILE) -DEXIT_CODE=0 -c true.c
     
     false.o: true.c
             $(COMPILE) -DEXIT_CODE=1 -c true.c && mv true.o false.o

   Also, these explicit rules do not work if the de-ANSI-fication
feature is used (*note ANSI::).  Supporting de-ANSI-fication requires a
little more work:

     true._o: true._c false.o
             $(COMPILE) -DEXIT_CODE=0 -c true.c
     
     false._o: true._c
             $(COMPILE) -DEXIT_CODE=1 -c true.c && mv true._o false.o

   As it turns out, there is also a much easier way to do this same
task.  Some of the above techniques are useful enough that we've kept
the example in the manual.  However if you were to build `true' and
`false' in real life, you would probably use per-program compilation
flags, like so:

     bin_PROGRAMS = false true
     
     false_SOURCES = true.c
     false_CPPFLAGS = -DEXIT_CODE=1
     
     true_SOURCES = true.c
     true_CPPFLAGS = -DEXIT_CODE=0

   In this case Automake will cause `true.c' to be compiled twice, with
different flags.  De-ANSI-fication will work automatically.  In this
instance, the names of the object files would be chosen by automake;
they would be `false-true.o' and `true-true.o'.  (The name of the
object files rarely matters.)


File: automake.info,  Node: Invoking Automake,  Next: configure,  Prev: Examples,  Up: Top

Creating a `Makefile.in'
************************

   To create all the `Makefile.in's for a package, run the `automake'
program in the top level directory, with no arguments.  `automake' will
automatically find each appropriate `Makefile.am' (by scanning
`configure.ac'; *note configure::) and generate the corresponding
`Makefile.in'.  Note that `automake' has a rather simplistic view of
what constitutes a package; it assumes that a package has only one
`configure.ac', at the top.  If your package has multiple
`configure.ac's, then you must run `automake' in each directory holding
a `configure.ac'.  (Alternatively, you may rely on Autoconf's
`autoreconf', which is able to recurse your package tree and run
`automake' where appropriate.)

   You can optionally give `automake' an argument; `.am' is appended to
the argument and the result is used as the name of the input file.
This feature is generally only used to automatically rebuild an
out-of-date `Makefile.in'.  Note that `automake' must always be run
from the topmost directory of a project, even if being used to
regenerate the `Makefile.in' in some subdirectory.  This is necessary
because `automake' must scan `configure.ac', and because `automake'
uses the knowledge that a `Makefile.in' is in a subdirectory to change
its behavior in some cases.

   Automake will run `autoconf' to scan `configure.ac' and its
dependencies (`aclocal.m4'), therefore `autoconf' must be in your
`PATH'.  If there is an `AUTOCONF' variable in your environment it will
be used instead of `autoconf', this allows you to select a particular
version of Autoconf.  By the way, don't misunderstand this paragraph:
Automake runs `autoconf' to *scan* your `configure.ac', this won't build
`configure' and you still have to run `autoconf' yourself for this
purpose.

   `automake' accepts the following options:

`-a'
`--add-missing'
     Automake requires certain common files to exist in certain
     situations; for instance `config.guess' is required if
     `configure.ac' runs `AC_CANONICAL_HOST'.  Automake is distributed
     with several of these files (*note Auxiliary Programs::); this
     option will cause the missing ones to be automatically added to
     the package, whenever possible.  In general if Automake tells you
     a file is missing, try using this option.  By default Automake
     tries to make a symbolic link pointing to its own copy of the
     missing file; this can be changed with `--copy'.

     Many of the potentially-missing files are common scripts whose
     location may be specified via the `AC_CONFIG_AUX_DIR' macro.
     Therefore, `AC_CONFIG_AUX_DIR''s setting affects whether a file is
     considered missing, and where the missing file is added (*note
     Optional::).

`--libdir=DIR'
     Look for Automake data files in directory DIR instead of in the
     installation directory.  This is typically used for debugging.

`-c'
`--copy'
     When used with `--add-missing', causes installed files to be
     copied.  The default is to make a symbolic link.

`--cygnus'
     Causes the generated `Makefile.in's to follow Cygnus rules, instead
     of GNU or Gnits rules.  For more information, see *Note Cygnus::.

`-f'
`--force-missing'
     When used with `--add-missing', causes standard files to be
     reinstalled even if they already exist in the source tree.  This
     involves removing the file from the source tree before creating
     the new symlink (or, with `--copy', copying the new file).

`--foreign'
     Set the global strictness to `foreign'.  For more information, see
     *Note Strictness::.

`--gnits'
     Set the global strictness to `gnits'.  For more information, see
     *Note Gnits::.

`--gnu'
     Set the global strictness to `gnu'.  For more information, see
     *Note Gnits::.  This is the default strictness.

`--help'
     Print a summary of the command line options and exit.

`-i'
`--ignore-deps'
     This disables the dependency tracking feature in generated
     `Makefile's; see *Note Dependencies::.

`--include-deps'
     This enables the dependency tracking feature.  This feature is
     enabled by default.  This option is provided for historical
     reasons only and probably should not be used.

`--no-force'
     Ordinarily `automake' creates all `Makefile.in's mentioned in
     `configure.ac'.  This option causes it to only update those
     `Makefile.in's which are out of date with respect to one of their
     dependents.

`-o DIR'
`--output-dir=DIR'
     Put the generated `Makefile.in' in the directory DIR.  Ordinarily
     each `Makefile.in' is created in the directory of the
     corresponding `Makefile.am'.  This option is deprecated and will be
     removed in a future release.

`-v'
`--verbose'
     Cause Automake to print information about which files are being
     read or created.

`--version'
     Print the version number of Automake and exit.

`-W CATEGORY'

`--warnings=CATEGORY'
     Output warnings falling in CATEGORY.  CATEGORY can be one of:
    `gnu'
          warnings related to the GNU Coding Standards (*note Top:
          (standards)Top.).

    `obsolete'
          obsolete features or constructions

    `override'
          user redefinitions of Automake rules or variables

    `portability'
          portability issues (e.g., use of Make features which are
          known not portable)

    `syntax'
          weird syntax, unused variables, typos

    `unsupported'
          unsupported or incomplete features

    `all'
          all the warnings

    `none'
          turn off all the warnings

    `error'
          treat warnings as errors

     A category can be turned off by prefixing its name with `no-'.  For
     instance `-Wno-syntax' will hide the warnings about unused
     variables.

     The categories output by default are `syntax' and `unsupported'.
     Additionally, `gnu' is enabled in `--gnu' and `--gnits' strictness.

     `portability' warnings are currently disabled by default, but they
     will be enabled in `--gnu' and `--gnits' strictness in a future
     release.

     The environment variable `WARNINGS' can contain a comma separated
     list of categories to enable.  It will be taken into account
     before the command-line switches, this way `-Wnone' will also
     ignore any warning category enabled by `WARNINGS'.  This variable
     is also used by other tools like `autoconf'; unknown categories
     are ignored for this reason.


File: automake.info,  Node: configure,  Next: Top level,  Prev: Invoking Automake,  Up: Top

Scanning `configure.ac'
***********************

   Automake scans the package's `configure.ac' to determine certain
information about the package.  Some `autoconf' macros are required and
some variables must be defined in `configure.ac'.  Automake will also
use information from `configure.ac' to further tailor its output.

   Automake also supplies some Autoconf macros to make the maintenance
easier.  These macros can automatically be put into your `aclocal.m4'
using the `aclocal' program.

* Menu:

* Requirements::                Configuration requirements
* Optional::                    Other things Automake recognizes
* Invoking aclocal::            Auto-generating aclocal.m4
* aclocal options::             aclocal command line arguments
* Macro search path::           Modifying aclocal's search path
* Macros::                      Autoconf macros supplied with Automake
* Extending aclocal::           Writing your own aclocal macros
* Local Macros::                Organizing local macros
* Future of aclocal::           aclocal's scheduled death


File: automake.info,  Node: Requirements,  Next: Optional,  Up: configure

Configuration requirements
==========================

   The one real requirement of Automake is that your `configure.ac'
call `AM_INIT_AUTOMAKE'.  This macro does several things which are
required for proper Automake operation (*note Macros::).

   Here are the other macros which Automake requires but which are not
run by `AM_INIT_AUTOMAKE':

`AC_CONFIG_FILES'
`AC_OUTPUT'
     Automake uses these to determine which files to create (*note
     Creating Output Files: (autoconf)Output.).  A listed file is
     considered to be an Automake generated `Makefile' if there exists
     a file with the same name and the `.am' extension appended.
     Typically, `AC_CONFIG_FILES([foo/Makefile])' will cause Automake to
     generate `foo/Makefile.in' if `foo/Makefile.am' exists.

     When using `AC_CONFIG_FILES' with multiple input files, as in
     `AC_CONFIG_FILES([Makefile:top.in:Makefile.in:bot.in])', Automake
     will generate the first `.in' input file for which a `.am' file
     exists.  If no such file exists the output file is not considered
     to be Automake generated.

     Files created by `AC_CONFIG_FILES' are removed by `make distclean'.


File: automake.info,  Node: Optional,  Next: Invoking aclocal,  Prev: Requirements,  Up: configure

Other things Automake recognizes
================================

   Every time Automake is run it calls Autoconf to trace
`configure.ac'.  This way it can recognize the use of certain macros
and tailor the generated `Makefile.in' appropriately.  Currently
recognized macros and their effects are:

`AC_CONFIG_HEADERS'
     Automake will generate rules to rebuild these headers.  Older
     versions of Automake required the use of `AM_CONFIG_HEADER' (*note
     Macros::); this is no longer the case today.

`AC_CONFIG_LINKS'
     Automake will generate rules to remove `configure' generated links
     on `make distclean' and to distribute named source files as part of
     `make dist'.

`AC_CONFIG_AUX_DIR'
     Automake will look for various helper scripts, such as
     `install-sh', in the directory named in this macro invocation.
     (The full list of scripts is: `config.guess', `config.sub',
     `depcomp', `elisp-comp', `compile', `install-sh', `ltmain.sh',
     `mdate-sh', `missing', `mkinstalldirs', `py-compile',
     `texinfo.tex', and `ylwrap'.)  Not all scripts are always searched
     for; some scripts will only be sought if the generated
     `Makefile.in' requires them.

     If `AC_CONFIG_AUX_DIR' is not given, the scripts are looked for in
     their `standard' locations.  For `mdate-sh', `texinfo.tex', and
     `ylwrap', the standard location is the source directory
     corresponding to the current `Makefile.am'.  For the rest, the
     standard location is the first one of `.', `..', or `../..'
     (relative to the top source directory) that provides any one of
     the helper scripts.  *Note Finding `configure' Input:
     (autoconf)Input.

     Required files from `AC_CONFIG_AUX_DIR' are automatically
     distributed, even if there is no `Makefile.am' in this directory.

`AC_CANONICAL_HOST'
     Automake will ensure that `config.guess' and `config.sub' exist.
     Also, the `Makefile' variables `host_alias' and `host_triplet' are
     introduced.  See *Note Getting the Canonical System Type:
     (autoconf)Canonicalizing.

`AC_CANONICAL_SYSTEM'
     This is similar to `AC_CANONICAL_HOST', but also defines the
     `Makefile' variables `build_alias' and `target_alias'.  *Note
     Getting the Canonical System Type: (autoconf)Canonicalizing.

`AC_LIBSOURCE'
`AC_LIBSOURCES'
`AC_LIBOBJ'
     Automake will automatically distribute any file listed in
     `AC_LIBSOURCE' or `AC_LIBSOURCES'.

     Note that the `AC_LIBOBJ' macro calls `AC_LIBSOURCE'.  So if an
     Autoconf macro is documented to call `AC_LIBOBJ([file])', then
     `file.c' will be distributed automatically by Automake.  This
     encompasses many macros like `AC_FUNC_ALLOCA', `AC_FUNC_MEMCMP',
     `AC_REPLACE_FUNCS', and others.

     By the way, direct assignments to `LIBOBJS' are no longer
     supported.  You should always use `AC_LIBOBJ' for this purpose.
     *Note `AC_LIBOBJ' vs. `LIBOBJS': (autoconf)AC_LIBOBJ vs LIBOBJS.

`AC_PROG_RANLIB'
     This is required if any libraries are built in the package.  *Note
     Particular Program Checks: (autoconf)Particular Programs.

`AC_PROG_CXX'
     This is required if any C++ source is included.  *Note Particular
     Program Checks: (autoconf)Particular Programs.

`AC_PROG_F77'
     This is required if any Fortran 77 source is included.  This macro
     is distributed with Autoconf version 2.13 and later.  *Note
     Particular Program Checks: (autoconf)Particular Programs.

`AC_F77_LIBRARY_LDFLAGS'
     This is required for programs and shared libraries that are a
     mixture of languages that include Fortran 77 (*note Mixing Fortran
     77 With C and C++::).  *Note Autoconf macros supplied with
     Automake: Macros.

`AC_PROG_LIBTOOL'
     Automake will turn on processing for `libtool' (*note
     Introduction: (libtool)Top.).

`AC_PROG_YACC'
     If a Yacc source file is seen, then you must either use this macro
     or define the variable `YACC' in `configure.ac'.  The former is
     preferred (*note Particular Program Checks: (autoconf)Particular
     Programs.).

`AC_PROG_LEX'
     If a Lex source file is seen, then this macro must be used.  *Note
     Particular Program Checks: (autoconf)Particular Programs.

`AC_SUBST'
     The first argument is automatically defined as a variable in each
     generated `Makefile.in'.  *Note Setting Output Variables:
     (autoconf)Setting Output Variables.

     If the Autoconf manual says that a macro calls `AC_SUBST' for VAR,
     or defines the output variable VAR then VAR will be defined in
     each `Makefile.in' generated by Automake.  E.g. `AC_PATH_XTRA'
     defines `X_CFLAGS' and `X_LIBS', so you can use these variables in
     any `Makefile.am' if `AC_PATH_XTRA' is called.

`AM_C_PROTOTYPES'
     This is required when using automatic de-ANSI-fication; see *Note
     ANSI::.

`AM_GNU_GETTEXT'
     This macro is required for packages which use GNU gettext (*note
     gettext::).  It is distributed with gettext.  If Automake sees
     this macro it ensures that the package meets some of gettext's
     requirements.

`AM_MAINTAINER_MODE'
     This macro adds a `--enable-maintainer-mode' option to
     `configure'.  If this is used, `automake' will cause
     `maintainer-only' rules to be turned off by default in the
     generated `Makefile.in's. This macro defines the `MAINTAINER_MODE'
     conditional, which you can use in your own `Makefile.am'.

`m4_include'
     Files included by `configure.ac' using this macro will be detected
     by Automake and automatically distributed.  They will also appear
     as dependencies in `Makefile' rules.

     `m4_include' is seldom used by `configure.ac' authors, but can
     appear in `aclocal.m4' when `aclocal' detects that some required
     macros come from files local to your package (as opposed to macros
     installed in a system-wide directory, see *Note Invoking
     aclocal::).


File: automake.info,  Node: Invoking aclocal,  Next: aclocal options,  Prev: Optional,  Up: configure

Auto-generating aclocal.m4
==========================

   Automake includes a number of Autoconf macros which can be used in
your package (*note Macros::); some of them are actually required by
Automake in certain situations.  These macros must be defined in your
`aclocal.m4'; otherwise they will not be seen by `autoconf'.

   The `aclocal' program will automatically generate `aclocal.m4' files
based on the contents of `configure.ac'.  This provides a convenient
way to get Automake-provided macros, without having to search around.
The `aclocal' mechanism allows other packages to supply their own
macros (*note Extending aclocal::).  You can also use it to maintain
your own set of custom macros (*note Local Macros::).

   At startup, `aclocal' scans all the `.m4' files it can find, looking
for macro definitions (*note Macro search path::).  Then it scans
`configure.ac'.  Any mention of one of the macros found in the first
step causes that macro, and any macros it in turn requires, to be put
into `aclocal.m4'.

   _Putting_ the file that contains the macro definition into
`aclocal.m4' is usually done by copying the entire text of this file,
including unused macro definitions as well as both `#' and `dnl'
comments.  If you want to make a comment which will be completely
ignored by `aclocal', use `##' as the comment leader.

   When `aclocal' detects that the file containing the macro definition
is in a subdirectory of your package, it will use `m4_include' instead
of copying it; this makes the package smaller and eases dependency
tracking.  This only works if the subdirectory containing the macro was
specified as a relative search path with `aclocal''s `-I' argument.
(*note Local Macros:: for an example.)  Any macro which is found in a
system-wide directory, or via an absolute search path will be copied.

   The contents of `acinclude.m4', if it exists, are also automatically
included in `aclocal.m4'.  We recommend against using `acinclude.m4' in
new packages (*note Local Macros::).

   While computing `aclocal.m4', `aclocal' runs `autom4te' (*note Using
`Autom4te': (autoconf)Using autom4te.) in order to trace the macros
which are really used, and omit from `aclocal.m4' all macros which are
mentioned but otherwise unexpanded (this can happen when a macro is
called conditionally).  `autom4te' is expected to be in the `PATH',
just as `autoconf'.  Its location can be overridden using the
`AUTOM4TE' environment variable.

* Menu:

* aclocal options::             Options supported by aclocal
* Macro search path::           How aclocal finds .m4 files

